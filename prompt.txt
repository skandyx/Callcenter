# Cahier des Charges pour l'Application d'Analyse de Centre d'Appels

## 1. Concept Général

L'application est un tableau de bord analytique en temps réel conçu pour les centres d'appels. Elle reçoit des flux de données directement depuis un système téléphonique (PBX) et les visualise à travers une interface web interactive. L'objectif est de fournir aux superviseurs et aux dirigeants une vue claire et immédiate des performances, d'identifier les tendances, de détecter les anomalies grâce à l'IA, et de permettre une analyse forensique des appels.

L'application est composée de deux vues principales :
- Un **Dashboard Principal** pour l'analyse détaillée et le suivi des indicateurs de performance clés (KPIs).
- Un **Wallboard** optimisé pour l'affichage sur de grands écrans, montrant l'état en direct des files d'attente et des agents.

## 2. Architecture Technique

- **Framework Frontend** : Next.js (avec App Router)
- **Langage** : TypeScript
- **Styling** : Tailwind CSS & shadcn/ui
- **Graphiques** : Recharts
- **IA Générative** : Genkit (Google AI)
- **Serveur Backend** : Route Handlers de Next.js.
- **Persistance des données** : Fichiers JSON stockés dans le dossier `Datas-json/` à la racine du projet.

## 3. Points de terminaison des flux de données (Streams)

Pour que l'application fonctionne, le système PBX doit être configuré pour envoyer des données via des requêtes HTTP POST aux points de terminaison (endpoints) suivants. Les URLs complètes peuvent être copiées depuis la boîte de dialogue "Paramètres" dans l'application.

1.  **Données d'appel simplifiées**
    *   **Endpoint** : `/api/stream`
    *   **Description** : Envoie un enregistrement de base pour chaque appel terminé, abandonné, etc. (Type: `CallData`)

2.  **Données d'appel avancées**
    *   **Endpoint** : `/api/stream/advanced-calls`
    *   **Description** : Envoie des enregistrements détaillés pour chaque événement d'un appel (transfert, mise en attente, IVR, etc.). Plusieurs enregistrements peuvent être envoyés pour un seul appel. (Type: `AdvancedCallData`)

3.  **Disponibilité des agents**
    *   **Endpoint** : `/api/stream/agent-status`
    *   **Description** : Envoie des statistiques sur l'état des agents (connecté, en pause, etc.) et leur activité dans les files d'attente. (Type: `AgentStatusData`)

4.  **Disponibilité des profils**
    *   **Endpoint** : `/api/stream/profile-availability`
    *   **Description** : Envoie des données sur le temps passé par chaque utilisateur dans différents profils de disponibilité (ex: "Available", "Lunch", "Meeting"). (Type: `ProfileAvailabilityData`)
